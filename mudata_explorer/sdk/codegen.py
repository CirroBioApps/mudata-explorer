from mudata_explorer import app
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)


def codegen_views():

    all_functions = []

    for view_type in app.all_view_types():
        logging.info(f"Building SDK method for view type '{view_type}'.")

        # Instantiate the view type
        view = app.get_view_by_type(view_type).build()

        # Construct a function signature from a set of elements
        elem = dict(
            view_type=view_type,
            safe_view_type=view_type.replace("-", "_"),
            help_text=view.help_text
        )

        # Make the view type safe for a function name
        all_functions.append(elem['safe_view_type'])

        # Construct the parameters for the function
        signature_kwargs = ",\n    ".join([
            (
                f"{kw.replace('.', '_')}='{val}'"
                if isinstance(val, str)
                else f"{kw.replace('.', '_')}={val}"
            )
            for kw, val in view.params.items()
        ])

        # Construct the signature for the function, which
        # includes the kwargs and the mdata arg
        if len(signature_kwargs) > 0:
            elem['signature'] = f"""
    mdata: MuData,
    {signature_kwargs}
"""

        else:
            elem['signature'] = "mdata: MuData"

        # Construct the signature for calling the add_view method
        elem["add_view_params"] = ",\n            ".join([
            f"'{kw}': {kw.replace('.', '_')}"
            for kw in view.params
        ])

        # Construct the parameters for the function
        code = """# THIS FILE IS AUTOGENERATED

from mudata_explorer import app
from muon import MuData


def {safe_view_type}({signature}):
    \"\"\"
    {help_text}
    \"\"\"

    app.add_view(
        '{view_type}',
        mdata,
        params={{
            {add_view_params}
        }}
    )
""".format(**elem)

        # Write the code to a file
        with open(f"view/_{elem['safe_view_type']}.py", "w") as f:
            f.write(code)

    # Generate the __init__.py file
    with open("view/__init__.py", "w") as f:
        f.write("\n".join([
            f"from ._{safe_view_type} import {safe_view_type} # noqa"
            for safe_view_type in all_functions
        ]))


def codegen_processes():

    all_functions = []

    for process_type in app.all_process_types():
        logging.info(f"Building SDK method for process type '{process_type}'.")

        # Instantiate the process type
        process = app.get_process_by_type(process_type)()

        # Construct a function signature from a set of elements
        elem = dict(
            process_type=process_type,
            safe_process_type=process_type.replace("-", "_"),
            help_text=process.help_text
        )

        # Make the process type safe for a function name
        all_functions.append(elem['safe_process_type'])

        # Construct the parameters for the function
        signature_kwargs = ",\n    ".join([
            (
                f"{kw.replace('.', '_')}='{val}'"
                if isinstance(val, str)
                else f"{kw.replace('.', '_')}={val}"
            )
            for kw, val in process.params.items()
        ])

        # Construct the signature for the function, which
        # includes the kwargs and the mdata arg
        if len(signature_kwargs) > 0:
            elem['signature'] = f"""
    mdata: MuData,
    {signature_kwargs}
"""

        else:
            elem['signature'] = "mdata: MuData"

        # Construct the signature for calling the add_process method
        elem["add_process_params"] = ",\n            ".join([
            f"'{kw}': {kw.replace('.', '_')}"
            for kw in process.params
        ])

        # Construct the parameters for the function
        code = """# THIS FILE IS AUTOGENERATED

from mudata_explorer import app
from muon import MuData


def {safe_process_type}({signature}):
    \"\"\"
    {help_text}
    \"\"\"

    app.add_process(
        '{process_type}',
        mdata,
        params={{
            {add_process_params}
        }}
    )
""".format(**elem)

        # Write the code to a file
        with open(f"process/_{elem['safe_process_type']}.py", "w") as f:
            f.write(code)

    # Generate the __init__.py file
    with open("process/__init__.py", "w") as f:
        f.write("\n".join([
            f"from ._{safe_process_type} import {safe_process_type} # noqa"
            for safe_process_type in all_functions
        ]))


if __name__ == "__main__":
    codegen_views()
    codegen_processes()
