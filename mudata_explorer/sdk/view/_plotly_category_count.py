# THIS FILE IS AUTOGENERATED

from mudata_explorer import app
from muon import MuData


def plotly_category_count(
    mdata: MuData,
    data_axis=0,
    data_x_table=None,
    data_x_cname=None,
    data_x_label='x-axis',
    data_color_table=None,
    data_color_cname=None,
    data_color_label='Color',
    data_color_enabled=True,
    data_color_is_categorical=True,
    data_color_scale='D3',
    data_rows_query_query_type='',
    data_rows_query_query_table='',
    data_rows_query_query_cname='',
    data_rows_query_query_expr='',
    data_rows_query_query_value='',
    data_cols_query_query_type='',
    data_cols_query_query_table='',
    data_cols_query_query_cname='',
    data_cols_query_query_expr='',
    data_cols_query_query_value='',
    data_transforms=[],
    ylabel='Count',
    barmode=None,
    scale_options_log_y=None
):
    """
    
    Show a bar graph which depicts the values in a single column,
    showing the number of times that each unique value is present.
    This is a frequency histogram showing categorical values.

    Optionally, a second column can be used to color the bars.
    When the color column is used, the position may be set to either
    stack vertically, or to group the bars side by side.
    
    """

    assert isinstance(mdata, MuData), "mdata must be a MuData object"

    app.add_view(
        'plotly-category-count',
        mdata,
        params={
            'data.axis': data_axis,
            'data.x.table': data_x_table,
            'data.x.cname': data_x_cname,
            'data.x.label': data_x_label,
            'data.color.table': data_color_table,
            'data.color.cname': data_color_cname,
            'data.color.label': data_color_label,
            'data.color.enabled': data_color_enabled,
            'data.color.is_categorical': data_color_is_categorical,
            'data.color.scale': data_color_scale,
            'data.rows_query.query.type': data_rows_query_query_type,
            'data.rows_query.query.table': data_rows_query_query_table,
            'data.rows_query.query.cname': data_rows_query_query_cname,
            'data.rows_query.query.expr': data_rows_query_query_expr,
            'data.rows_query.query.value': data_rows_query_query_value,
            'data.cols_query.query.type': data_cols_query_query_type,
            'data.cols_query.query.table': data_cols_query_query_table,
            'data.cols_query.query.cname': data_cols_query_query_cname,
            'data.cols_query.query.expr': data_cols_query_query_expr,
            'data.cols_query.query.value': data_cols_query_query_value,
            'data.transforms': data_transforms,
            'ylabel': ylabel,
            'barmode': barmode,
            'scale_options.log_y': scale_options_log_y
        }
    )
