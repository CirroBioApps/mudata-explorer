# THIS FILE IS AUTOGENERATED

from mudata_explorer.sdk.helpers import collapse_params
from mudata_explorer.helpers.assets import make_process
from muon import MuData


def hdbscan(
    mdata: MuData,
    table_sidebar=False,
    table_data_sidebar=False,
    table_data_axis=0,
    table_data_axis_sidebar=False,
    table_data_tables=[],
    table_data_tables_sidebar=False,
    table_data_rows_query_query_type='',
    table_data_rows_query_query_sidebar=False,
    table_data_rows_query_query_table='',
    table_data_rows_query_query_cname='',
    table_data_rows_query_query_expr='',
    table_data_rows_query_query_value='',
    table_data_cols_query_query_type='',
    table_data_cols_query_query_sidebar=False,
    table_data_cols_query_query_table='',
    table_data_cols_query_query_cname='',
    table_data_cols_query_query_expr='',
    table_data_cols_query_query_value='',
    table_data_transforms=[],
    table_data_transforms_sidebar=False,
    clustering_sidebar=False,
    clustering_min_cluster_size_sidebar=False,
    clustering_min_cluster_size=5,
    clustering_min_samples_sidebar=False,
    clustering_min_samples=5,
    clustering_cluster_selection_epsilon_sidebar=False,
    clustering_cluster_selection_epsilon=0.0,
    clustering_metric_sidebar=False,
    clustering_metric='euclidean',
    clustering_alpha_sidebar=False,
    clustering_alpha=1.0,
    clustering_algorithm_sidebar=False,
    clustering_algorithm='auto‚Äù',
    clustering_leaf_size_sidebar=False,
    clustering_leaf_size=40,
    clustering_cluster_selection_method_sidebar=False,
    clustering_cluster_selection_method='eom',
    clustering_allow_single_cluster_sidebar=False,
    clustering_allow_single_cluster=False,
    outputs_sidebar=False,
    outputs_dest_key_sidebar=False,
    outputs_dest_key='dbscan',
    **extra_params
):
    """
    
    Cluster data using hierarchical density-based clustering.

    [HDBSCAN - Hierarchical Density-Based Spatial Clustering of Applications with Noise](https://scikit-learn.org/stable/modules/generated/sklearn.cluster.HDBSCAN.html#sklearn.cluster.HDBSCAN).
    Performs DBSCAN over varying epsilon values and integrates the result to find a
    clustering that gives the best stability over epsilon. This allows HDBSCAN to
    find clusters of varying densities (unlike DBSCAN), and be more robust to
    parameter selection. Read more in the [User Guide](https://scikit-learn.org/stable/modules/clustering.html#hdbscan).

    For an example of how to use HDBSCAN, as well as a comparison to DBSCAN, please see the
    [plotting demo](https://scikit-learn.org/stable/auto_examples/cluster/plot_hdbscan.html#sphx-glr-auto-examples-cluster-plot-hdbscan-py).
    
    """

    assert isinstance(mdata, MuData), "mdata must be a MuData object"
    extra_params = collapse_params(extra_params)

    # Instantiate the process using all of the parameters
    process = make_process(
        'hdbscan',
        params={
            'table.sidebar': extra_params.get('table_sidebar', table_sidebar),
            'table.data.sidebar': extra_params.get('table_data_sidebar', table_data_sidebar),
            'table.data.axis': extra_params.get('table_data_axis', table_data_axis),
            'table.data.axis.sidebar': extra_params.get('table_data_axis_sidebar', table_data_axis_sidebar),
            'table.data.tables': extra_params.get('table_data_tables', table_data_tables),
            'table.data.tables.sidebar': extra_params.get('table_data_tables_sidebar', table_data_tables_sidebar),
            'table.data.rows_query.query.type': extra_params.get('table_data_rows_query_query_type', table_data_rows_query_query_type),
            'table.data.rows_query.query.sidebar': extra_params.get('table_data_rows_query_query_sidebar', table_data_rows_query_query_sidebar),
            'table.data.rows_query.query.table': extra_params.get('table_data_rows_query_query_table', table_data_rows_query_query_table),
            'table.data.rows_query.query.cname': extra_params.get('table_data_rows_query_query_cname', table_data_rows_query_query_cname),
            'table.data.rows_query.query.expr': extra_params.get('table_data_rows_query_query_expr', table_data_rows_query_query_expr),
            'table.data.rows_query.query.value': extra_params.get('table_data_rows_query_query_value', table_data_rows_query_query_value),
            'table.data.cols_query.query.type': extra_params.get('table_data_cols_query_query_type', table_data_cols_query_query_type),
            'table.data.cols_query.query.sidebar': extra_params.get('table_data_cols_query_query_sidebar', table_data_cols_query_query_sidebar),
            'table.data.cols_query.query.table': extra_params.get('table_data_cols_query_query_table', table_data_cols_query_query_table),
            'table.data.cols_query.query.cname': extra_params.get('table_data_cols_query_query_cname', table_data_cols_query_query_cname),
            'table.data.cols_query.query.expr': extra_params.get('table_data_cols_query_query_expr', table_data_cols_query_query_expr),
            'table.data.cols_query.query.value': extra_params.get('table_data_cols_query_query_value', table_data_cols_query_query_value),
            'table.data.transforms': extra_params.get('table_data_transforms', table_data_transforms),
            'table.data.transforms.sidebar': extra_params.get('table_data_transforms_sidebar', table_data_transforms_sidebar),
            'clustering.sidebar': extra_params.get('clustering_sidebar', clustering_sidebar),
            'clustering.min_cluster_size.sidebar': extra_params.get('clustering_min_cluster_size_sidebar', clustering_min_cluster_size_sidebar),
            'clustering.min_cluster_size': extra_params.get('clustering_min_cluster_size', clustering_min_cluster_size),
            'clustering.min_samples.sidebar': extra_params.get('clustering_min_samples_sidebar', clustering_min_samples_sidebar),
            'clustering.min_samples': extra_params.get('clustering_min_samples', clustering_min_samples),
            'clustering.cluster_selection_epsilon.sidebar': extra_params.get('clustering_cluster_selection_epsilon_sidebar', clustering_cluster_selection_epsilon_sidebar),
            'clustering.cluster_selection_epsilon': extra_params.get('clustering_cluster_selection_epsilon', clustering_cluster_selection_epsilon),
            'clustering.metric.sidebar': extra_params.get('clustering_metric_sidebar', clustering_metric_sidebar),
            'clustering.metric': extra_params.get('clustering_metric', clustering_metric),
            'clustering.alpha.sidebar': extra_params.get('clustering_alpha_sidebar', clustering_alpha_sidebar),
            'clustering.alpha': extra_params.get('clustering_alpha', clustering_alpha),
            'clustering.algorithm.sidebar': extra_params.get('clustering_algorithm_sidebar', clustering_algorithm_sidebar),
            'clustering.algorithm': extra_params.get('clustering_algorithm', clustering_algorithm),
            'clustering.leaf_size.sidebar': extra_params.get('clustering_leaf_size_sidebar', clustering_leaf_size_sidebar),
            'clustering.leaf_size': extra_params.get('clustering_leaf_size', clustering_leaf_size),
            'clustering.cluster_selection_method.sidebar': extra_params.get('clustering_cluster_selection_method_sidebar', clustering_cluster_selection_method_sidebar),
            'clustering.cluster_selection_method': extra_params.get('clustering_cluster_selection_method', clustering_cluster_selection_method),
            'clustering.allow_single_cluster.sidebar': extra_params.get('clustering_allow_single_cluster_sidebar', clustering_allow_single_cluster_sidebar),
            'clustering.allow_single_cluster': extra_params.get('clustering_allow_single_cluster', clustering_allow_single_cluster),
            'outputs.sidebar': extra_params.get('outputs_sidebar', outputs_sidebar),
            'outputs.dest_key.sidebar': extra_params.get('outputs_dest_key_sidebar', outputs_dest_key_sidebar),
            'outputs.dest_key': extra_params.get('outputs_dest_key', outputs_dest_key)
        },
        mdata=mdata,
        params_editable=False
    )

    assert process.params_editable is False, "params_editable must be False"
    assert isinstance(process.mdata, MuData), type(process.mdata)

    # Get the data from the object
    process.get_data()

    # Run the process
    process.execute()

