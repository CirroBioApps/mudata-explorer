# THIS FILE IS AUTOGENERATED

from mudata_explorer.sdk.helpers import collapse_params
from mudata_explorer.helpers.assets import make_process
from muon import MuData


def t_test_ind(
    mdata: MuData,
    data_sidebar=False,
    data_axis_value=None,
    data_axis_sidebar=False,
    data_transforms_value=[],
    data_transforms_sidebar=False,
    data_tables_value=[],
    data_tables_sidebar=False,
    data_filter_cols_sidebar=False,
    data_filter_cols_type_value=None,
    data_filter_cols_type_sidebar=False,
    data_filter_cols_tables_value=[],
    data_filter_cols_tables_sidebar=False,
    data_filter_cols_cname_value=None,
    data_filter_cols_cname_sidebar=False,
    data_filter_cols_expr_value=None,
    data_filter_cols_expr_sidebar=False,
    data_filter_cols_value_enum_value=None,
    data_filter_cols_value_enum_sidebar=False,
    data_filter_cols_value_str_value=None,
    data_filter_cols_value_str_sidebar=False,
    data_filter_rows_sidebar=False,
    data_filter_rows_type_value=None,
    data_filter_rows_type_sidebar=False,
    data_filter_rows_tables_value=[],
    data_filter_rows_tables_sidebar=False,
    data_filter_rows_cname_value=None,
    data_filter_rows_cname_sidebar=False,
    data_filter_rows_expr_value=None,
    data_filter_rows_expr_sidebar=False,
    data_filter_rows_value_enum_value=None,
    data_filter_rows_value_enum_sidebar=False,
    data_filter_rows_value_str_value=None,
    data_filter_rows_value_str_sidebar=False,
    group_sidebar=False,
    group_axis_value=None,
    group_axis_sidebar=False,
    group_transforms_value=[],
    group_transforms_sidebar=False,
    group_columns_group_sidebar=False,
    group_columns_group_table_value=None,
    group_columns_group_table_sidebar=False,
    group_columns_group_cname_value=None,
    group_columns_group_cname_sidebar=False,
    group_columns_group_label_value='Group',
    group_columns_group_label_sidebar=False,
    group_columns_group_scale_value=None,
    group_columns_group_scale_sidebar=False,
    group_columns_group_colorscale=False,
    group_columns_group_is_categorical_value=False,
    group_columns_group_is_categorical_sidebar=False,
    group_filter_rows_sidebar=False,
    group_filter_rows_type_value=None,
    group_filter_rows_type_sidebar=False,
    group_filter_rows_tables_value=[],
    group_filter_rows_tables_sidebar=False,
    group_filter_rows_cname_value=None,
    group_filter_rows_cname_sidebar=False,
    group_filter_rows_expr_value=None,
    group_filter_rows_expr_sidebar=False,
    group_filter_rows_value_enum_value=None,
    group_filter_rows_value_enum_sidebar=False,
    group_filter_rows_value_str_value=None,
    group_filter_rows_value_str_sidebar=False,
    dest_key_value='t_test_ind',
    dest_key_sidebar=False,
    **extra_params
):
    """
    
    The independent samples t-test is used to determine if there is a significant
    difference between the means of two independent groups. It assumes that the
    data is normally distributed and that the variances of the two groups are equal.

    > Make sure that the 'Group' column only contains two unique values.

    Results will include:

    - pvalue: The p-value of the t-test
    - neg_log10_pvalue: The negative log10 of the p-value
    - t_statistic: The t-statistic of the t-test
    - median_diff: The difference in medians between the two groups

    
    """

    assert isinstance(mdata, MuData), "mdata must be a MuData object"
    extra_params = collapse_params(extra_params)

    # Instantiate the process using all of the parameters
    process = make_process(
        't-test-ind',
        params={
            'data.sidebar': extra_params.get('data_sidebar', data_sidebar),
            'data.axis.value': extra_params.get('data_axis_value', data_axis_value),
            'data.axis.sidebar': extra_params.get('data_axis_sidebar', data_axis_sidebar),
            'data.transforms.value': extra_params.get('data_transforms_value', data_transforms_value),
            'data.transforms.sidebar': extra_params.get('data_transforms_sidebar', data_transforms_sidebar),
            'data.tables.value': extra_params.get('data_tables_value', data_tables_value),
            'data.tables.sidebar': extra_params.get('data_tables_sidebar', data_tables_sidebar),
            'data.filter_cols.sidebar': extra_params.get('data_filter_cols_sidebar', data_filter_cols_sidebar),
            'data.filter_cols.type.value': extra_params.get('data_filter_cols_type_value', data_filter_cols_type_value),
            'data.filter_cols.type.sidebar': extra_params.get('data_filter_cols_type_sidebar', data_filter_cols_type_sidebar),
            'data.filter_cols.tables.value': extra_params.get('data_filter_cols_tables_value', data_filter_cols_tables_value),
            'data.filter_cols.tables.sidebar': extra_params.get('data_filter_cols_tables_sidebar', data_filter_cols_tables_sidebar),
            'data.filter_cols.cname.value': extra_params.get('data_filter_cols_cname_value', data_filter_cols_cname_value),
            'data.filter_cols.cname.sidebar': extra_params.get('data_filter_cols_cname_sidebar', data_filter_cols_cname_sidebar),
            'data.filter_cols.expr.value': extra_params.get('data_filter_cols_expr_value', data_filter_cols_expr_value),
            'data.filter_cols.expr.sidebar': extra_params.get('data_filter_cols_expr_sidebar', data_filter_cols_expr_sidebar),
            'data.filter_cols.value_enum.value': extra_params.get('data_filter_cols_value_enum_value', data_filter_cols_value_enum_value),
            'data.filter_cols.value_enum.sidebar': extra_params.get('data_filter_cols_value_enum_sidebar', data_filter_cols_value_enum_sidebar),
            'data.filter_cols.value_str.value': extra_params.get('data_filter_cols_value_str_value', data_filter_cols_value_str_value),
            'data.filter_cols.value_str.sidebar': extra_params.get('data_filter_cols_value_str_sidebar', data_filter_cols_value_str_sidebar),
            'data.filter_rows.sidebar': extra_params.get('data_filter_rows_sidebar', data_filter_rows_sidebar),
            'data.filter_rows.type.value': extra_params.get('data_filter_rows_type_value', data_filter_rows_type_value),
            'data.filter_rows.type.sidebar': extra_params.get('data_filter_rows_type_sidebar', data_filter_rows_type_sidebar),
            'data.filter_rows.tables.value': extra_params.get('data_filter_rows_tables_value', data_filter_rows_tables_value),
            'data.filter_rows.tables.sidebar': extra_params.get('data_filter_rows_tables_sidebar', data_filter_rows_tables_sidebar),
            'data.filter_rows.cname.value': extra_params.get('data_filter_rows_cname_value', data_filter_rows_cname_value),
            'data.filter_rows.cname.sidebar': extra_params.get('data_filter_rows_cname_sidebar', data_filter_rows_cname_sidebar),
            'data.filter_rows.expr.value': extra_params.get('data_filter_rows_expr_value', data_filter_rows_expr_value),
            'data.filter_rows.expr.sidebar': extra_params.get('data_filter_rows_expr_sidebar', data_filter_rows_expr_sidebar),
            'data.filter_rows.value_enum.value': extra_params.get('data_filter_rows_value_enum_value', data_filter_rows_value_enum_value),
            'data.filter_rows.value_enum.sidebar': extra_params.get('data_filter_rows_value_enum_sidebar', data_filter_rows_value_enum_sidebar),
            'data.filter_rows.value_str.value': extra_params.get('data_filter_rows_value_str_value', data_filter_rows_value_str_value),
            'data.filter_rows.value_str.sidebar': extra_params.get('data_filter_rows_value_str_sidebar', data_filter_rows_value_str_sidebar),
            'group.sidebar': extra_params.get('group_sidebar', group_sidebar),
            'group.axis.value': extra_params.get('group_axis_value', group_axis_value),
            'group.axis.sidebar': extra_params.get('group_axis_sidebar', group_axis_sidebar),
            'group.transforms.value': extra_params.get('group_transforms_value', group_transforms_value),
            'group.transforms.sidebar': extra_params.get('group_transforms_sidebar', group_transforms_sidebar),
            'group.columns.group.sidebar': extra_params.get('group_columns_group_sidebar', group_columns_group_sidebar),
            'group.columns.group.table.value': extra_params.get('group_columns_group_table_value', group_columns_group_table_value),
            'group.columns.group.table.sidebar': extra_params.get('group_columns_group_table_sidebar', group_columns_group_table_sidebar),
            'group.columns.group.cname.value': extra_params.get('group_columns_group_cname_value', group_columns_group_cname_value),
            'group.columns.group.cname.sidebar': extra_params.get('group_columns_group_cname_sidebar', group_columns_group_cname_sidebar),
            'group.columns.group.label.value': extra_params.get('group_columns_group_label_value', group_columns_group_label_value),
            'group.columns.group.label.sidebar': extra_params.get('group_columns_group_label_sidebar', group_columns_group_label_sidebar),
            'group.columns.group.scale.value': extra_params.get('group_columns_group_scale_value', group_columns_group_scale_value),
            'group.columns.group.scale.sidebar': extra_params.get('group_columns_group_scale_sidebar', group_columns_group_scale_sidebar),
            'group.columns.group.colorscale': extra_params.get('group_columns_group_colorscale', group_columns_group_colorscale),
            'group.columns.group.is_categorical.value': extra_params.get('group_columns_group_is_categorical_value', group_columns_group_is_categorical_value),
            'group.columns.group.is_categorical.sidebar': extra_params.get('group_columns_group_is_categorical_sidebar', group_columns_group_is_categorical_sidebar),
            'group.filter_rows.sidebar': extra_params.get('group_filter_rows_sidebar', group_filter_rows_sidebar),
            'group.filter_rows.type.value': extra_params.get('group_filter_rows_type_value', group_filter_rows_type_value),
            'group.filter_rows.type.sidebar': extra_params.get('group_filter_rows_type_sidebar', group_filter_rows_type_sidebar),
            'group.filter_rows.tables.value': extra_params.get('group_filter_rows_tables_value', group_filter_rows_tables_value),
            'group.filter_rows.tables.sidebar': extra_params.get('group_filter_rows_tables_sidebar', group_filter_rows_tables_sidebar),
            'group.filter_rows.cname.value': extra_params.get('group_filter_rows_cname_value', group_filter_rows_cname_value),
            'group.filter_rows.cname.sidebar': extra_params.get('group_filter_rows_cname_sidebar', group_filter_rows_cname_sidebar),
            'group.filter_rows.expr.value': extra_params.get('group_filter_rows_expr_value', group_filter_rows_expr_value),
            'group.filter_rows.expr.sidebar': extra_params.get('group_filter_rows_expr_sidebar', group_filter_rows_expr_sidebar),
            'group.filter_rows.value_enum.value': extra_params.get('group_filter_rows_value_enum_value', group_filter_rows_value_enum_value),
            'group.filter_rows.value_enum.sidebar': extra_params.get('group_filter_rows_value_enum_sidebar', group_filter_rows_value_enum_sidebar),
            'group.filter_rows.value_str.value': extra_params.get('group_filter_rows_value_str_value', group_filter_rows_value_str_value),
            'group.filter_rows.value_str.sidebar': extra_params.get('group_filter_rows_value_str_sidebar', group_filter_rows_value_str_sidebar),
            'dest_key.value': extra_params.get('dest_key_value', dest_key_value),
            'dest_key.sidebar': extra_params.get('dest_key_sidebar', dest_key_sidebar)
        },
        mdata=mdata,
        params_editable=False
    )

    assert process.params_editable is False, "params_editable must be False"
    assert isinstance(process.mdata, MuData), type(process.mdata)

    # Populate the params for the process
    process.populate_params()

    # Run the process
    process.execute()

