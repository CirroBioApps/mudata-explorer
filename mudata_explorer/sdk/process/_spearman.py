# THIS FILE IS AUTOGENERATED

from mudata_explorer import app
from mudata_explorer.sdk.helpers import collapse_params
from mudata_explorer.helpers import make_process
from muon import MuData


def spearman(
    mdata: MuData,
    table_data_axis=0,
    table_data_tables=[],
    table_data_rows_query_query_type='',
    table_data_rows_query_query_table='',
    table_data_rows_query_query_cname='',
    table_data_rows_query_query_expr='',
    table_data_rows_query_query_value='',
    table_data_cols_query_query_type='',
    table_data_cols_query_query_table='',
    table_data_cols_query_query_cname='',
    table_data_cols_query_query_expr='',
    table_data_cols_query_query_value='',
    table_data_transforms=[],
    table_comparitor_axis=0,
    table_comparitor_comparitor_table=None,
    table_comparitor_comparitor_cname=None,
    table_comparitor_comparitor_label='Comparitor',
    table_comparitor_rows_query_query_type='',
    table_comparitor_rows_query_query_table='',
    table_comparitor_rows_query_query_cname='',
    table_comparitor_rows_query_query_expr='',
    table_comparitor_rows_query_query_value='',
    table_comparitor_cols_query_query_type='',
    table_comparitor_cols_query_query_table='',
    table_comparitor_cols_query_query_cname='',
    table_comparitor_cols_query_query_expr='',
    table_comparitor_cols_query_query_value='',
    table_comparitor_transforms=[],
    outputs_dest_key='spearman',
    **extra_params
):
    """
    
The Spearman rank-order correlation coefficient is a nonparametric measure of
the strength and direction of association between two ranked variables.
It assesses how well the relationship between two variables can be described
using a monotonic function.
A simple way of describing the analysis is that it is a Pearson correlation
on the ranks of the data (and so it does not assume a linear relationship).

Documentation:
- Wikipedia: [Spearman's rank correlation coefficient](https://en.wikipedia.org/wiki/Spearman%27s_rank_correlation_coefficient)
- Scipy: [scipy.stats.spearmanr](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.spearmanr.html)
    
    """

    assert isinstance(mdata, MuData), "mdata must be a MuData object"
    extra_params = collapse_params(extra_params)

    # Instantiate the process using all of the parameters
    process = make_process(
        'spearman',
        params={
            'table.data.axis': extra_params.get('table_data_axis', table_data_axis),
            'table.data.tables': extra_params.get('table_data_tables', table_data_tables),
            'table.data.rows_query.query.type': extra_params.get('table_data_rows_query_query_type', table_data_rows_query_query_type),
            'table.data.rows_query.query.table': extra_params.get('table_data_rows_query_query_table', table_data_rows_query_query_table),
            'table.data.rows_query.query.cname': extra_params.get('table_data_rows_query_query_cname', table_data_rows_query_query_cname),
            'table.data.rows_query.query.expr': extra_params.get('table_data_rows_query_query_expr', table_data_rows_query_query_expr),
            'table.data.rows_query.query.value': extra_params.get('table_data_rows_query_query_value', table_data_rows_query_query_value),
            'table.data.cols_query.query.type': extra_params.get('table_data_cols_query_query_type', table_data_cols_query_query_type),
            'table.data.cols_query.query.table': extra_params.get('table_data_cols_query_query_table', table_data_cols_query_query_table),
            'table.data.cols_query.query.cname': extra_params.get('table_data_cols_query_query_cname', table_data_cols_query_query_cname),
            'table.data.cols_query.query.expr': extra_params.get('table_data_cols_query_query_expr', table_data_cols_query_query_expr),
            'table.data.cols_query.query.value': extra_params.get('table_data_cols_query_query_value', table_data_cols_query_query_value),
            'table.data.transforms': extra_params.get('table_data_transforms', table_data_transforms),
            'table.comparitor.axis': extra_params.get('table_comparitor_axis', table_comparitor_axis),
            'table.comparitor.comparitor.table': extra_params.get('table_comparitor_comparitor_table', table_comparitor_comparitor_table),
            'table.comparitor.comparitor.cname': extra_params.get('table_comparitor_comparitor_cname', table_comparitor_comparitor_cname),
            'table.comparitor.comparitor.label': extra_params.get('table_comparitor_comparitor_label', table_comparitor_comparitor_label),
            'table.comparitor.rows_query.query.type': extra_params.get('table_comparitor_rows_query_query_type', table_comparitor_rows_query_query_type),
            'table.comparitor.rows_query.query.table': extra_params.get('table_comparitor_rows_query_query_table', table_comparitor_rows_query_query_table),
            'table.comparitor.rows_query.query.cname': extra_params.get('table_comparitor_rows_query_query_cname', table_comparitor_rows_query_query_cname),
            'table.comparitor.rows_query.query.expr': extra_params.get('table_comparitor_rows_query_query_expr', table_comparitor_rows_query_query_expr),
            'table.comparitor.rows_query.query.value': extra_params.get('table_comparitor_rows_query_query_value', table_comparitor_rows_query_query_value),
            'table.comparitor.cols_query.query.type': extra_params.get('table_comparitor_cols_query_query_type', table_comparitor_cols_query_query_type),
            'table.comparitor.cols_query.query.table': extra_params.get('table_comparitor_cols_query_query_table', table_comparitor_cols_query_query_table),
            'table.comparitor.cols_query.query.cname': extra_params.get('table_comparitor_cols_query_query_cname', table_comparitor_cols_query_query_cname),
            'table.comparitor.cols_query.query.expr': extra_params.get('table_comparitor_cols_query_query_expr', table_comparitor_cols_query_query_expr),
            'table.comparitor.cols_query.query.value': extra_params.get('table_comparitor_cols_query_query_value', table_comparitor_cols_query_query_value),
            'table.comparitor.transforms': extra_params.get('table_comparitor_transforms', table_comparitor_transforms),
            'outputs.dest_key': extra_params.get('outputs_dest_key', outputs_dest_key)
        },
        mdata=mdata,
        params_editable=False
    )

    assert process.params_editable is False, "params_editable must be False"
    assert isinstance(process.mdata, MuData), type(process.mdata)

    # Get the data from the object
    process.get_data()

    # Run the process
    process.execute()

