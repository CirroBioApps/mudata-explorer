# THIS FILE IS AUTOGENERATED

from mudata_explorer import app
from mudata_explorer.sdk.helpers import collapse_params
from mudata_explorer.helpers import make_process
from muon import MuData


def anova(
    mdata: MuData,
    table_data_axis=0,
    table_data_tables=[],
    table_data_rows_query_query_type='',
    table_data_rows_query_query_table='',
    table_data_rows_query_query_cname='',
    table_data_rows_query_query_expr='',
    table_data_rows_query_query_value='',
    table_data_cols_query_query_type='',
    table_data_cols_query_query_table='',
    table_data_cols_query_query_cname='',
    table_data_cols_query_query_expr='',
    table_data_cols_query_query_value='',
    table_data_transforms=[],
    table_grouping_axis=0,
    table_grouping_grouping_table=None,
    table_grouping_grouping_cname=None,
    table_grouping_grouping_label='Grouping',
    table_grouping_rows_query_query_type='',
    table_grouping_rows_query_query_table='',
    table_grouping_rows_query_query_cname='',
    table_grouping_rows_query_query_expr='',
    table_grouping_rows_query_query_value='',
    table_grouping_cols_query_query_type='',
    table_grouping_cols_query_query_table='',
    table_grouping_cols_query_query_cname='',
    table_grouping_cols_query_query_expr='',
    table_grouping_cols_query_query_value='',
    table_grouping_transforms=[],
    outputs_dest_key='anova',
    **extra_params
):
    """
    
    The one-way ANOVA is used to determine if there are any statistically
    significant differences between the means of two or more independent
    (unrelated) groups. It assumes that the data is normally distributed
    and that the variances of the groups are equal.

    If these assumptions are not met, the results of the ANOVA may not be
    valid. In this case, consider using a non-parametric alternative such
    as the Kruskal-Wallis test.

    Wikipedia: [One-Way ANOVA](https://en.wikipedia.org/wiki/Analysis_of_variance)
    Scipy: [scipy.stats.f_oneway](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.f_oneway.html)

    Results will include:
    
    - F-statistic: The F-statistic of the ANOVA
    - pvalue: The p-value of the ANOVA
    
    """

    assert isinstance(mdata, MuData), "mdata must be a MuData object"
    extra_params = collapse_params(extra_params)

    # Instantiate the process using all of the parameters
    process = make_process(
        'anova',
        params={
            'table.data.axis': extra_params.get('table_data_axis', table_data_axis),
            'table.data.tables': extra_params.get('table_data_tables', table_data_tables),
            'table.data.rows_query.query.type': extra_params.get('table_data_rows_query_query_type', table_data_rows_query_query_type),
            'table.data.rows_query.query.table': extra_params.get('table_data_rows_query_query_table', table_data_rows_query_query_table),
            'table.data.rows_query.query.cname': extra_params.get('table_data_rows_query_query_cname', table_data_rows_query_query_cname),
            'table.data.rows_query.query.expr': extra_params.get('table_data_rows_query_query_expr', table_data_rows_query_query_expr),
            'table.data.rows_query.query.value': extra_params.get('table_data_rows_query_query_value', table_data_rows_query_query_value),
            'table.data.cols_query.query.type': extra_params.get('table_data_cols_query_query_type', table_data_cols_query_query_type),
            'table.data.cols_query.query.table': extra_params.get('table_data_cols_query_query_table', table_data_cols_query_query_table),
            'table.data.cols_query.query.cname': extra_params.get('table_data_cols_query_query_cname', table_data_cols_query_query_cname),
            'table.data.cols_query.query.expr': extra_params.get('table_data_cols_query_query_expr', table_data_cols_query_query_expr),
            'table.data.cols_query.query.value': extra_params.get('table_data_cols_query_query_value', table_data_cols_query_query_value),
            'table.data.transforms': extra_params.get('table_data_transforms', table_data_transforms),
            'table.grouping.axis': extra_params.get('table_grouping_axis', table_grouping_axis),
            'table.grouping.grouping.table': extra_params.get('table_grouping_grouping_table', table_grouping_grouping_table),
            'table.grouping.grouping.cname': extra_params.get('table_grouping_grouping_cname', table_grouping_grouping_cname),
            'table.grouping.grouping.label': extra_params.get('table_grouping_grouping_label', table_grouping_grouping_label),
            'table.grouping.rows_query.query.type': extra_params.get('table_grouping_rows_query_query_type', table_grouping_rows_query_query_type),
            'table.grouping.rows_query.query.table': extra_params.get('table_grouping_rows_query_query_table', table_grouping_rows_query_query_table),
            'table.grouping.rows_query.query.cname': extra_params.get('table_grouping_rows_query_query_cname', table_grouping_rows_query_query_cname),
            'table.grouping.rows_query.query.expr': extra_params.get('table_grouping_rows_query_query_expr', table_grouping_rows_query_query_expr),
            'table.grouping.rows_query.query.value': extra_params.get('table_grouping_rows_query_query_value', table_grouping_rows_query_query_value),
            'table.grouping.cols_query.query.type': extra_params.get('table_grouping_cols_query_query_type', table_grouping_cols_query_query_type),
            'table.grouping.cols_query.query.table': extra_params.get('table_grouping_cols_query_query_table', table_grouping_cols_query_query_table),
            'table.grouping.cols_query.query.cname': extra_params.get('table_grouping_cols_query_query_cname', table_grouping_cols_query_query_cname),
            'table.grouping.cols_query.query.expr': extra_params.get('table_grouping_cols_query_query_expr', table_grouping_cols_query_query_expr),
            'table.grouping.cols_query.query.value': extra_params.get('table_grouping_cols_query_query_value', table_grouping_cols_query_query_value),
            'table.grouping.transforms': extra_params.get('table_grouping_transforms', table_grouping_transforms),
            'outputs.dest_key': extra_params.get('outputs_dest_key', outputs_dest_key)
        },
        mdata=mdata,
        params_editable=False
    )

    assert process.params_editable is False, "params_editable must be False"
    assert isinstance(process.mdata, MuData), type(process.mdata)

    # Get the data from the object
    process.get_data()

    # Run the process
    process.execute()

