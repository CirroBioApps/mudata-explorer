# THIS FILE IS AUTOGENERATED

from mudata_explorer.sdk.helpers import collapse_params
from mudata_explorer.helpers.assets import make_process
from muon import MuData


def anova(
    mdata: MuData,
    table_data_sidebar=False,
    table_data_axis_value=0,
    table_data_axis_sidebar=False,
    table_data_transforms_value=[],
    table_data_transforms_sidebar=False,
    table_data_tables_value=[],
    table_data_tables_sidebar=False,
    table_data_filter_cols_sidebar=False,
    table_data_filter_cols_type_value=None,
    table_data_filter_cols_type_sidebar=False,
    table_data_filter_cols_tables_value=[],
    table_data_filter_cols_tables_sidebar=False,
    table_data_filter_cols_cname_value=None,
    table_data_filter_cols_cname_sidebar=False,
    table_data_filter_cols_expr_value=None,
    table_data_filter_cols_expr_sidebar=False,
    table_data_filter_cols_value_enum_value=None,
    table_data_filter_cols_value_enum_sidebar=False,
    table_data_filter_cols_value_str_value=None,
    table_data_filter_cols_value_str_sidebar=False,
    table_data_filter_rows_sidebar=False,
    table_data_filter_rows_type_value=None,
    table_data_filter_rows_type_sidebar=False,
    table_data_filter_rows_tables_value=[],
    table_data_filter_rows_tables_sidebar=False,
    table_data_filter_rows_cname_value=None,
    table_data_filter_rows_cname_sidebar=False,
    table_data_filter_rows_expr_value=None,
    table_data_filter_rows_expr_sidebar=False,
    table_data_filter_rows_value_enum_value=None,
    table_data_filter_rows_value_enum_sidebar=False,
    table_data_filter_rows_value_str_value=None,
    table_data_filter_rows_value_str_sidebar=False,
    table_grouping_sidebar=False,
    table_grouping_axis_value=0,
    table_grouping_axis_sidebar=False,
    table_grouping_transforms_value=[],
    table_grouping_transforms_sidebar=False,
    table_grouping_columns_grouping_sidebar=False,
    table_grouping_columns_grouping_table_value=None,
    table_grouping_columns_grouping_table_sidebar=False,
    table_grouping_columns_grouping_cname_value=None,
    table_grouping_columns_grouping_cname_sidebar=False,
    table_grouping_columns_grouping_label_value='Grouping',
    table_grouping_columns_grouping_label_sidebar=False,
    table_grouping_columns_grouping_scale_value=None,
    table_grouping_columns_grouping_scale_sidebar=False,
    table_grouping_columns_grouping_colorscale=False,
    table_grouping_columns_grouping_is_categorical_value=False,
    table_grouping_columns_grouping_is_categorical_sidebar=False,
    table_grouping_filter_rows_sidebar=False,
    table_grouping_filter_rows_type_value=None,
    table_grouping_filter_rows_type_sidebar=False,
    table_grouping_filter_rows_tables_value=[],
    table_grouping_filter_rows_tables_sidebar=False,
    table_grouping_filter_rows_cname_value=None,
    table_grouping_filter_rows_cname_sidebar=False,
    table_grouping_filter_rows_expr_value=None,
    table_grouping_filter_rows_expr_sidebar=False,
    table_grouping_filter_rows_value_enum_value=None,
    table_grouping_filter_rows_value_enum_sidebar=False,
    table_grouping_filter_rows_value_str_value=None,
    table_grouping_filter_rows_value_str_sidebar=False,
    outputs_dest_key_value='anova',
    outputs_dest_key_sidebar=False,
    **extra_params
):
    """
    
    The one-way ANOVA is used to determine if there are any statistically
    significant differences between the means of two or more independent
    (unrelated) groups. It assumes that the data is normally distributed
    and that the variances of the groups are equal.

    If these assumptions are not met, the results of the ANOVA may not be
    valid. In this case, consider using a non-parametric alternative such
    as the Kruskal-Wallis test.

    Wikipedia: [One-Way ANOVA](https://en.wikipedia.org/wiki/Analysis_of_variance)
    Scipy: [scipy.stats.f_oneway](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.f_oneway.html)

    Results will include:
    
    - F-statistic: The F-statistic of the ANOVA
    - pvalue: The p-value of the ANOVA
    
    """

    assert isinstance(mdata, MuData), "mdata must be a MuData object"
    extra_params = collapse_params(extra_params)

    # Instantiate the process using all of the parameters
    process = make_process(
        'anova',
        params={
            'table.data.sidebar': extra_params.get('table_data_sidebar', table_data_sidebar),
            'table.data.axis.value': extra_params.get('table_data_axis_value', table_data_axis_value),
            'table.data.axis.sidebar': extra_params.get('table_data_axis_sidebar', table_data_axis_sidebar),
            'table.data.transforms.value': extra_params.get('table_data_transforms_value', table_data_transforms_value),
            'table.data.transforms.sidebar': extra_params.get('table_data_transforms_sidebar', table_data_transforms_sidebar),
            'table.data.tables.value': extra_params.get('table_data_tables_value', table_data_tables_value),
            'table.data.tables.sidebar': extra_params.get('table_data_tables_sidebar', table_data_tables_sidebar),
            'table.data.filter_cols.sidebar': extra_params.get('table_data_filter_cols_sidebar', table_data_filter_cols_sidebar),
            'table.data.filter_cols.type.value': extra_params.get('table_data_filter_cols_type_value', table_data_filter_cols_type_value),
            'table.data.filter_cols.type.sidebar': extra_params.get('table_data_filter_cols_type_sidebar', table_data_filter_cols_type_sidebar),
            'table.data.filter_cols.tables.value': extra_params.get('table_data_filter_cols_tables_value', table_data_filter_cols_tables_value),
            'table.data.filter_cols.tables.sidebar': extra_params.get('table_data_filter_cols_tables_sidebar', table_data_filter_cols_tables_sidebar),
            'table.data.filter_cols.cname.value': extra_params.get('table_data_filter_cols_cname_value', table_data_filter_cols_cname_value),
            'table.data.filter_cols.cname.sidebar': extra_params.get('table_data_filter_cols_cname_sidebar', table_data_filter_cols_cname_sidebar),
            'table.data.filter_cols.expr.value': extra_params.get('table_data_filter_cols_expr_value', table_data_filter_cols_expr_value),
            'table.data.filter_cols.expr.sidebar': extra_params.get('table_data_filter_cols_expr_sidebar', table_data_filter_cols_expr_sidebar),
            'table.data.filter_cols.value_enum.value': extra_params.get('table_data_filter_cols_value_enum_value', table_data_filter_cols_value_enum_value),
            'table.data.filter_cols.value_enum.sidebar': extra_params.get('table_data_filter_cols_value_enum_sidebar', table_data_filter_cols_value_enum_sidebar),
            'table.data.filter_cols.value_str.value': extra_params.get('table_data_filter_cols_value_str_value', table_data_filter_cols_value_str_value),
            'table.data.filter_cols.value_str.sidebar': extra_params.get('table_data_filter_cols_value_str_sidebar', table_data_filter_cols_value_str_sidebar),
            'table.data.filter_rows.sidebar': extra_params.get('table_data_filter_rows_sidebar', table_data_filter_rows_sidebar),
            'table.data.filter_rows.type.value': extra_params.get('table_data_filter_rows_type_value', table_data_filter_rows_type_value),
            'table.data.filter_rows.type.sidebar': extra_params.get('table_data_filter_rows_type_sidebar', table_data_filter_rows_type_sidebar),
            'table.data.filter_rows.tables.value': extra_params.get('table_data_filter_rows_tables_value', table_data_filter_rows_tables_value),
            'table.data.filter_rows.tables.sidebar': extra_params.get('table_data_filter_rows_tables_sidebar', table_data_filter_rows_tables_sidebar),
            'table.data.filter_rows.cname.value': extra_params.get('table_data_filter_rows_cname_value', table_data_filter_rows_cname_value),
            'table.data.filter_rows.cname.sidebar': extra_params.get('table_data_filter_rows_cname_sidebar', table_data_filter_rows_cname_sidebar),
            'table.data.filter_rows.expr.value': extra_params.get('table_data_filter_rows_expr_value', table_data_filter_rows_expr_value),
            'table.data.filter_rows.expr.sidebar': extra_params.get('table_data_filter_rows_expr_sidebar', table_data_filter_rows_expr_sidebar),
            'table.data.filter_rows.value_enum.value': extra_params.get('table_data_filter_rows_value_enum_value', table_data_filter_rows_value_enum_value),
            'table.data.filter_rows.value_enum.sidebar': extra_params.get('table_data_filter_rows_value_enum_sidebar', table_data_filter_rows_value_enum_sidebar),
            'table.data.filter_rows.value_str.value': extra_params.get('table_data_filter_rows_value_str_value', table_data_filter_rows_value_str_value),
            'table.data.filter_rows.value_str.sidebar': extra_params.get('table_data_filter_rows_value_str_sidebar', table_data_filter_rows_value_str_sidebar),
            'table.grouping.sidebar': extra_params.get('table_grouping_sidebar', table_grouping_sidebar),
            'table.grouping.axis.value': extra_params.get('table_grouping_axis_value', table_grouping_axis_value),
            'table.grouping.axis.sidebar': extra_params.get('table_grouping_axis_sidebar', table_grouping_axis_sidebar),
            'table.grouping.transforms.value': extra_params.get('table_grouping_transforms_value', table_grouping_transforms_value),
            'table.grouping.transforms.sidebar': extra_params.get('table_grouping_transforms_sidebar', table_grouping_transforms_sidebar),
            'table.grouping.columns.grouping.sidebar': extra_params.get('table_grouping_columns_grouping_sidebar', table_grouping_columns_grouping_sidebar),
            'table.grouping.columns.grouping.table.value': extra_params.get('table_grouping_columns_grouping_table_value', table_grouping_columns_grouping_table_value),
            'table.grouping.columns.grouping.table.sidebar': extra_params.get('table_grouping_columns_grouping_table_sidebar', table_grouping_columns_grouping_table_sidebar),
            'table.grouping.columns.grouping.cname.value': extra_params.get('table_grouping_columns_grouping_cname_value', table_grouping_columns_grouping_cname_value),
            'table.grouping.columns.grouping.cname.sidebar': extra_params.get('table_grouping_columns_grouping_cname_sidebar', table_grouping_columns_grouping_cname_sidebar),
            'table.grouping.columns.grouping.label.value': extra_params.get('table_grouping_columns_grouping_label_value', table_grouping_columns_grouping_label_value),
            'table.grouping.columns.grouping.label.sidebar': extra_params.get('table_grouping_columns_grouping_label_sidebar', table_grouping_columns_grouping_label_sidebar),
            'table.grouping.columns.grouping.scale.value': extra_params.get('table_grouping_columns_grouping_scale_value', table_grouping_columns_grouping_scale_value),
            'table.grouping.columns.grouping.scale.sidebar': extra_params.get('table_grouping_columns_grouping_scale_sidebar', table_grouping_columns_grouping_scale_sidebar),
            'table.grouping.columns.grouping.colorscale': extra_params.get('table_grouping_columns_grouping_colorscale', table_grouping_columns_grouping_colorscale),
            'table.grouping.columns.grouping.is_categorical.value': extra_params.get('table_grouping_columns_grouping_is_categorical_value', table_grouping_columns_grouping_is_categorical_value),
            'table.grouping.columns.grouping.is_categorical.sidebar': extra_params.get('table_grouping_columns_grouping_is_categorical_sidebar', table_grouping_columns_grouping_is_categorical_sidebar),
            'table.grouping.filter_rows.sidebar': extra_params.get('table_grouping_filter_rows_sidebar', table_grouping_filter_rows_sidebar),
            'table.grouping.filter_rows.type.value': extra_params.get('table_grouping_filter_rows_type_value', table_grouping_filter_rows_type_value),
            'table.grouping.filter_rows.type.sidebar': extra_params.get('table_grouping_filter_rows_type_sidebar', table_grouping_filter_rows_type_sidebar),
            'table.grouping.filter_rows.tables.value': extra_params.get('table_grouping_filter_rows_tables_value', table_grouping_filter_rows_tables_value),
            'table.grouping.filter_rows.tables.sidebar': extra_params.get('table_grouping_filter_rows_tables_sidebar', table_grouping_filter_rows_tables_sidebar),
            'table.grouping.filter_rows.cname.value': extra_params.get('table_grouping_filter_rows_cname_value', table_grouping_filter_rows_cname_value),
            'table.grouping.filter_rows.cname.sidebar': extra_params.get('table_grouping_filter_rows_cname_sidebar', table_grouping_filter_rows_cname_sidebar),
            'table.grouping.filter_rows.expr.value': extra_params.get('table_grouping_filter_rows_expr_value', table_grouping_filter_rows_expr_value),
            'table.grouping.filter_rows.expr.sidebar': extra_params.get('table_grouping_filter_rows_expr_sidebar', table_grouping_filter_rows_expr_sidebar),
            'table.grouping.filter_rows.value_enum.value': extra_params.get('table_grouping_filter_rows_value_enum_value', table_grouping_filter_rows_value_enum_value),
            'table.grouping.filter_rows.value_enum.sidebar': extra_params.get('table_grouping_filter_rows_value_enum_sidebar', table_grouping_filter_rows_value_enum_sidebar),
            'table.grouping.filter_rows.value_str.value': extra_params.get('table_grouping_filter_rows_value_str_value', table_grouping_filter_rows_value_str_value),
            'table.grouping.filter_rows.value_str.sidebar': extra_params.get('table_grouping_filter_rows_value_str_sidebar', table_grouping_filter_rows_value_str_sidebar),
            'outputs.dest_key.value': extra_params.get('outputs_dest_key_value', outputs_dest_key_value),
            'outputs.dest_key.sidebar': extra_params.get('outputs_dest_key_sidebar', outputs_dest_key_sidebar)
        },
        mdata=mdata,
        params_editable=False
    )

    assert process.params_editable is False, "params_editable must be False"
    assert isinstance(process.mdata, MuData), type(process.mdata)

    # Populate the params for the process
    process.populate_params()

    # Run the process
    process.execute()

